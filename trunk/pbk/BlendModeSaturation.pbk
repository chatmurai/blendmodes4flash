/*	
.__       _____   ____    ______      ______   __  __     
/\ \     /\  __`\/\  _`\ /\__  _\    /\__  _\ /\ \/\ \    
\ \ \    \ \ \/\ \ \,\L\_\/_/\ \/    \/_/\ \/ \ \ `\\ \   
.\ \ \  __\ \ \ \ \/_\__ \  \ \ \       \ \ \  \ \ , ` \  
..\ \ \L\ \\ \ \_\ \/\ \L\ \ \ \ \       \_\ \__\ \ \`\ \ 
...\ \____/ \ \_____\ `\____\ \ \_\      /\_____\\ \_\ \_\
....\/___/   \/_____/\/_____/  \/_/      \/_____/ \/_/\/_/
	                                                          
	                                                          
.______  ____    ______  ______   _____   __  __  ____    ____     ____    ______   ____    ______   
/\  _  \/\  _`\ /\__  _\/\__  _\ /\  __`\/\ \/\ \/\  _`\ /\  _`\  /\  _`\ /\__  _\ /\  _`\ /\__  _\  
\ \ \L\ \ \ \/\_\/_/\ \/\/_/\ \/ \ \ \/\ \ \ `\\ \ \,\L\_\ \ \/\_\\ \ \L\ \/_/\ \/ \ \ \L\ \/_/\ \/  
.\ \  __ \ \ \/_/_ \ \ \   \ \ \  \ \ \ \ \ \ , ` \/_\__ \\ \ \/_/_\ \ ,  /  \ \ \  \ \ ,__/  \ \ \  
..\ \ \/\ \ \ \L\ \ \ \ \   \_\ \__\ \ \_\ \ \ \`\ \/\ \L\ \ \ \L\ \\ \ \\ \  \_\ \__\ \ \/    \ \ \ 
...\ \_\ \_\ \____/  \ \_\  /\_____\\ \_____\ \_\ \_\ `\____\ \____/ \ \_\ \_\/\_____\\ \_\     \ \_\
....\/_/\/_/\/___/    \/_/  \/_____/ \/_____/\/_/\/_/\/_____/\/___/   \/_/\/ /\/_____/ \/_/      \/_/

    
Copyright (c) 2009 Lost In Actionscript - Shane McCartney

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

*/

<languageVersion: 1.0;>
kernel BlendModeSaturation
<
	namespace : "blendmodes";
	vendor: "Lost In Actionscript";
	version: 1;
	description: "This blend mode uses the saturation of the top layer color and the luminance and hue of the bottom layer.";
>
{
	input image4 src1;
    input image4 src2;
    
    parameter float alpha
    <defaultValue:float(1.0);>;

    parameter float multiply
    <defaultValue:float(1.0);
    minValue:float(1.0);
    maxValue:float(10.0);>;
    
	output pixel4 dst;

	void evaluatePixel()
	{
		float2 uv = outCoord();
		
		float4 src1Rgba = sampleLinear(src1, uv);
        float4 src2Rgba = sampleLinear(src2, uv);
        
        float src1Alpha = src1Rgba.a;
        float src2Alpha = alpha*src2Rgba.a;
        
        if(src1Rgba.a>0.0) src1Rgba.rgb *= 1.0/src1Rgba.a;
        if(src2Rgba.a>0.0) src2Rgba.rgb *= 1.0/src2Rgba.a;
		
		/////////////////////////////////////////////
		// RGB to HSL
		
		// x = hue
		// y = saturation
		// z = luminosity
		
		float fmin;
		float fmax;
        float delta;
		
		float3 hsl1;
		float3 hsl2;
		
		/////////////////////////////////////////////
		// HSL rgba1
		
		fmin = min(min(src1Rgba.r, src1Rgba.g), src1Rgba.b);    //Min. value of RGB
		fmax = max(max(src1Rgba.r, src1Rgba.g), src1Rgba.b);    //Max. value of RGB
		delta = fmax - fmin; //Delta RGB value
		
		hsl1.z = (fmax + fmin) / 2.0; // Luminance

		if (delta == 0.0)		//This is a gray, no chroma...
		{
			hsl1.x = 0.0;	// Hue
			hsl1.y = 0.0;	// Saturation
		}
		else //Chromatic data...
		{

			if (hsl1.z < 0.5){
				hsl1.y = delta / (fmax + fmin); // Saturation
			} else {
				hsl1.y = delta / (2.0 - fmax - fmin); // Saturation
			}
			
			float deltaR = (((fmax - src1Rgba.r) / 6.0) + (delta / 2.0)) / delta;
			float deltaG = (((fmax - src1Rgba.g) / 6.0) + (delta / 2.0)) / delta;
			float deltaB = (((fmax - src1Rgba.b) / 6.0) + (delta / 2.0)) / delta;
	
			if (src1Rgba.r == fmax){
				hsl1.x = deltaB - deltaG; // Hue
			} else if (src1Rgba.g == fmax) {
				hsl1.x = (1.0 / 3.0) + deltaR - deltaB; // Hue
			} else if (src1Rgba.b == fmax) {
				hsl1.x = (2.0 / 3.0) + deltaG - deltaR; // Hue
			}
			
			if (hsl1.x < 0.0){
				hsl1.x += 1.0; // Hue
			} else if (hsl1.x > 1.0) {
				hsl1.x -= 1.0; // Hue
			}
			
		}
		
		//hsl1.xyz = clamp(hsl1.xyz, float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0));

		/////////////////////////////////////////////
		// HSL rgba2
		
		fmin = min(min(src2Rgba.r, src2Rgba.g), src2Rgba.b);    //Min. value of RGB
		fmax = max(max(src2Rgba.r, src2Rgba.g), src2Rgba.b);    //Max. value of RGBs
		delta = fmax - fmin; //Delta RGB value
		
		hsl2.z = (fmax + fmin) / 2.0; // Luminance

		if (delta == 0.0)		//This is a gray, no chroma...
		{
			hsl2.x = 0.0;	// Hue
			hsl2.y = 0.0;	// Saturation
		}
		else //Chromatic data...
		{

			if (hsl2.z < 0.5){
				hsl2.y = delta / (fmax + fmin); // Saturation
			} else {
				hsl2.y = delta / (2.0 - fmax - fmin); // Saturation
			}
			
			float deltaR = (((fmax - src2Rgba.r) / 6.0) + (delta / 2.0)) / delta;
			float deltaG = (((fmax - src2Rgba.g) / 6.0) + (delta / 2.0)) / delta;
			float deltaB = (((fmax - src2Rgba.b) / 6.0) + (delta / 2.0)) / delta;
	
			if (src2Rgba.r == fmax){
				hsl2.x = deltaB - deltaG; // Hue
			} else if (src2Rgba.g == fmax) {
				hsl2.x = (1.0 / 3.0) + deltaR - deltaB; // Hue
			} else if (src2Rgba.b == fmax) {
				hsl2.x = (2.0 / 3.0) + deltaG - deltaR; // Hue
			}
			
			if (hsl2.x < 0.0){
				hsl2.x += 1.0; // Hue
			} else if (hsl2.x > 1.0) {
				hsl2.x -= 1.0; // Hue
			}
			
		}
		
		//hsl2.xyz = clamp(hsl2.xyz, float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0));
		
		/////////////////////////////////////////////
		// HSL to RGB
        float3 hsl = float3(hsl1.x, hsl2.y, hsl1.z);
		float4 rgba = float4(hsl.x,hsl.x,hsl.x,src2Alpha);

		if (hsl.y == 0.0){
			rgba.rgb = float3(hsl.z, hsl.z, hsl.z); // Luminance
		} else {
			
			float f1;
			float f2;
			float hue;
			float rgb;
			
			if (hsl.z < 0.5){
				f2 = hsl.z * (1.0 + hsl.y);
			} else {
				f2 = (hsl.z + hsl.y) - (hsl.y * hsl.z);
			}
			f1 = 2.0 * hsl.z - f2;
			
			//////////////////////////////////////////
			// Convert Red
			hue = hsl.x + (1.0/3.0);
			
			if (hue < 0.0) { 
				hue += 1.0;
			} else if (hue > 1.0) {
				hue -= 1.0;
			}
			
			if ((6.0 * hue) < 1.0){
				rgb = f1 + (f2 - f1) * 6.0 * hue;
			} else if ((2.0 * hue) < 1.0){
				rgb = f2;
			} else if ((3.0 * hue) < 2.0){
				rgb = f1 + (f2 - f1) * ((2.0 / 3.0) - hue) * 6.0;
			} else {
				rgb = f1;
			}
		
			rgba.r = rgb;
			
			//////////////////////////////////////////
			// Convert Green
			hue = hsl.x;
			
			if (hue < 0.0) { 
				hue += 1.0;
			} else if (hue > 1.0) {
				hue -= 1.0;
			}
			
			if ((6.0 * hue) < 1.0){
				rgb = f1 + (f2 - f1) * 6.0 * hue;
			} else if ((2.0 * hue) < 1.0){
				rgb = f2;
			} else if ((3.0 * hue) < 2.0){
				rgb = f1 + (f2 - f1) * ((2.0 / 3.0) - hue) * 6.0;
			} else {
				rgb = f1;
			}
		
			rgba.g = rgb;
			
			//////////////////////////////////////////
			// Convert Blue
			hue = hsl.x - (1.0/3.0);
			
			if (hue < 0.0) { 
				hue += 1.0;
			} else if (hue > 1.0) {
				hue -= 1.0;
			}
			
			if ((6.0 * hue) < 1.0){
				rgb = f1 + (f2 - f1) * 6.0 * hue;
			} else if ((2.0 * hue) < 1.0){
				rgb = f2;
			} else if ((3.0 * hue) < 2.0){
				rgb = f1 + (f2 - f1) * ((2.0 / 3.0) - hue) * 6.0;
			} else {
				rgb = f1;
			}
		
			rgba.b = rgb;

		}
		
		rgba.rgb = clamp(rgba.rgb, float3(0.0, 0.0, 0.0), float3(1.0, 1.0, 1.0));
		
		rgba.rgb*=multiply;
        rgba.rgb*=rgba.a;
		
		float offsetAlpha = 1.0-src2Alpha;
		
		dst.rgb = rgba.rgb+src1Rgba.rgb*offsetAlpha;
        dst.a = src1Alpha+src2Alpha;
        dst.a = min(1.0, dst.a);
	}
}
