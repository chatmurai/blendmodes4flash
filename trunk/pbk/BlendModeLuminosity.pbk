/*	
.__       _____   ____    ______      ______   __  __     
/\ \     /\  __`\/\  _`\ /\__  _\    /\__  _\ /\ \/\ \    
\ \ \    \ \ \/\ \ \,\L\_\/_/\ \/    \/_/\ \/ \ \ `\\ \   
.\ \ \  __\ \ \ \ \/_\__ \  \ \ \       \ \ \  \ \ , ` \  
..\ \ \L\ \\ \ \_\ \/\ \L\ \ \ \ \       \_\ \__\ \ \`\ \ 
...\ \____/ \ \_____\ `\____\ \ \_\      /\_____\\ \_\ \_\
....\/___/   \/_____/\/_____/  \/_/      \/_____/ \/_/\/_/
	                                                          
	                                                          
.______  ____    ______  ______   _____   __  __  ____    ____     ____    ______   ____    ______   
/\  _  \/\  _`\ /\__  _\/\__  _\ /\  __`\/\ \/\ \/\  _`\ /\  _`\  /\  _`\ /\__  _\ /\  _`\ /\__  _\  
\ \ \L\ \ \ \/\_\/_/\ \/\/_/\ \/ \ \ \/\ \ \ `\\ \ \,\L\_\ \ \/\_\\ \ \L\ \/_/\ \/ \ \ \L\ \/_/\ \/  
.\ \  __ \ \ \/_/_ \ \ \   \ \ \  \ \ \ \ \ \ , ` \/_\__ \\ \ \/_/_\ \ ,  /  \ \ \  \ \ ,__/  \ \ \  
..\ \ \/\ \ \ \L\ \ \ \ \   \_\ \__\ \ \_\ \ \ \`\ \/\ \L\ \ \ \L\ \\ \ \\ \  \_\ \__\ \ \/    \ \ \ 
...\ \_\ \_\ \____/  \ \_\  /\_____\\ \_____\ \_\ \_\ `\____\ \____/ \ \_\ \_\/\_____\\ \_\     \ \_\
....\/_/\/_/\/___/    \/_/  \/_____/ \/_____/\/_/\/_/\/_____/\/___/   \/_/\/ /\/_____/ \/_/      \/_/

    
Copyright (c) 2009 Lost In Actionscript - Shane McCartney

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

*/

<languageVersion: 1.0;>
kernel BlendModeLuminosity
<
	namespace : "blendmodes";
	vendor: "Lost In Actionscript";
	version: 1;
	description: "This blend mode uses only the luminance of the top layer color and ignores the hue and saturation values of the bottom layer.";
>
{
	input image4 src1;
    input image4 src2;
    
    parameter float alpha
    <defaultValue:float(1.0);>;

    parameter float multiply
    <defaultValue:float(1.0);
    minValue:float(1.0);
    maxValue:float(10.0);>;
    
	output pixel4 dst;

	void evaluatePixel()
	{
		float2 uv = outCoord();
		
		float4 src1Rgba = sampleLinear(src1, uv);
        float4 src2Rgba = sampleLinear(src2, uv);
        
        float src1Alpha = src1Rgba.a;
        float src2Alpha = alpha*src2Rgba.a;
        
        if(src1Alpha>0.0) src1Rgba.rgb *= 1.0/src1Rgba.a;
        if(src2Alpha>0.0) src2Rgba.rgb *= 1.0/src2Rgba.a;
		
		// RGB to HSL
		
		// Hue / Saturation
		float fmin = min(min(src1Rgba.r, src1Rgba.g), src1Rgba.b);    //Min. value of RGB
		float fmax = max(max(src1Rgba.r, src1Rgba.g), src1Rgba.b);    //Max. value of RGB

		float delta = fmax - fmin; //Delta RGB value
		float3 hsl;
		
		hsl.z = (fmax + fmin) / 2.0; // Luminance

		if (delta == 0.0)		//This is a gray, no chroma...
		{
			hsl.x = 0.0;	// Hue
			hsl.y = 0.0;	// Saturation
		}
		else //Chromatic data...
		{

			if (hsl.z < 0.5){
				hsl.y = delta / (fmax + fmin); // Saturation
			} else {
				hsl.y = delta / (2.0 - fmax - fmin); // Saturation
			}
			
			float deltaR = (((fmax - src1Rgba.r) / 6.0) + (delta / 2.0)) / delta;
			float deltaG = (((fmax - src1Rgba.g) / 6.0) + (delta / 2.0)) / delta;
			float deltaB = (((fmax - src1Rgba.b) / 6.0) + (delta / 2.0)) / delta;
	
			if (src1Rgba.r == fmax){
				hsl.x = deltaB - deltaG; // Hue
			} else if (src1Rgba.g == fmax) {
				hsl.x = (1.0 / 3.0) + deltaR - deltaB; // Hue
			} else if (src1Rgba.b == fmax) {
				hsl.x = (2.0 / 3.0) + deltaG - deltaR; // Hue
			}
			
			if (hsl.x < 0.0){
				hsl.x += 1.0; // Hue
			} else if (hsl.x > 1.0) {
				hsl.x -= 1.0; // Hue
			}
			
		}
		
		// Luminance
		fmin = min(min(src2Rgba.r, src2Rgba.g), src2Rgba.b);    //Min. value of RGB
		fmax = max(max(src2Rgba.r, src2Rgba.g), src2Rgba.b);    //Max. value of RGB

		delta = fmax - fmin; //Delta RGB value
		
		hsl.z = (fmax + fmin) / 2.0; // Luminance
		
		// HSL to RGB
		float4 rgba = float4(0.0,0.0,0.0,src2Alpha);

		if (hsl.y == 0.0){
			rgba.rgb = float3(hsl.z, hsl.z, hsl.z); // Luminance
		} else {
	
			float f2;
			if (hsl.z < 0.5){
				f2 = hsl.z * (1.0 + hsl.y);
			} else {
				f2 = (hsl.z + hsl.y) - (hsl.y * hsl.z);
			}
			float f1 = 2.0 * hsl.z - f2;
			
			// Hue to RGB
			float hue;
			float rgb;
			//
			// Convert Red
			hue = hsl.x + (1.0/3.0);
			
			if (hue < 0.0) { 
				hue += 1.0;
			} else if (hue > 1.0) {
				hue -= 1.0;
			}
			
			if ((6.0 * hue) < 1.0){
				rgb = f1 + (f2 - f1) * 6.0 * hue;
			} else if ((2.0 * hue) < 1.0){
				rgb = f2;
			} else if ((3.0 * hue) < 2.0){
				rgb = f1 + (f2 - f1) * ((2.0 / 3.0) - hue) * 6.0;
			} else {
				rgb = f1;
			}
		
			rgba.r = rgb;
			//
			// Convert Green
			hue = hsl.x;
			
			if (hue < 0.0) { 
				hue += 1.0;
			} else if (hue > 1.0) {
				hue -= 1.0;
			}
			
			if ((6.0 * hue) < 1.0){
				rgb = f1 + (f2 - f1) * 6.0 * hue;
			} else if ((2.0 * hue) < 1.0){
				rgb = f2;
			} else if ((3.0 * hue) < 2.0){
				rgb = f1 + (f2 - f1) * ((2.0 / 3.0) - hue) * 6.0;
			} else {
				rgb = f1;
			}
		
			rgba.g = rgb;
			//
			// Convert Blue
			hue = hsl.x - (1.0/3.0);
			
			if (hue < 0.0) { 
				hue += 1.0;
			} else if (hue > 1.0) {
				hue -= 1.0;
			}
			
			if ((6.0 * hue) < 1.0){
				rgb = f1 + (f2 - f1) * 6.0 * hue;
			} else if ((2.0 * hue) < 1.0){
				rgb = f2;
			} else if ((3.0 * hue) < 2.0){
				rgb = f1 + (f2 - f1) * ((2.0 / 3.0) - hue) * 6.0;
			} else {
				rgb = f1;
			}
		
			rgba.b = rgb;
			//
	
		}
		//
		
		rgba.rgb*=multiply;
        rgba.rgb*=rgba.a;
		
		float offsetAlpha = 1.0-src2Alpha;
		
		dst.rgb = rgba.rgb+src1Rgba.rgb*offsetAlpha;
        dst.a = src1Alpha+src2Alpha;
        dst.a = min(1.0, dst.a);
	}
}
